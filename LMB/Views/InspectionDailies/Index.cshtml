@model IEnumerable<LMB.Models.InspectionDaily>

@{
    ViewBag.Title = "Index";
}

<style>
    #map_canvas {
        height: 400px;
        width: 100%;
    }

    #buttons {
        display: block;
        float: right;
    }

    table.dataTable thead tr {
        background: rgba(0, 63, 79, 0.1);
    }

    .dataTables_filter {
        float: left !important;
        margin-left: -189px;
        margin-top: -42px;
    }

    .grey {
        background-color: #eefbf6;
    }

    .lila {
        background-color: #f7eeee;
    }

    .green {
        background-color: #fcfde1;
    }
</style>
<div id="inspection_status">
    <img src="~/img/inspectionstatus.png" height="50" style="display: block;float: right;" />
</div>
<div id="buttons">
   
    <a id="alumno" data-target="#modalUser" data-toggle="modal" data-id=""  onclick="getSelected()" href="#" class="unlock" title="Assign user">   
    <img width="30" alt="Assign user" title="Assign user" src="~/img/ic_asignar.png"></a>
    <button type="button" class="w3-button w3-light-grey w3-round" onclick="location.href='@Url.Action("Create")'">

        <img width="30" alt="Add Inspection" title="Add Inspection" src="~/img/ic_addinsp.png">
    </button>
    <a id="deleteIns" data-target="#modalDelete" data-toggle="modal" data-id="" onclick="getSelectedDel()" href="#" class="unlock" title="Delete Inspection"><img width="30" alt="Delete Inspection" title="Delete Inspection" src="~/img/ic_delinsp.png"></a>
</div>
<table class="table" id="rawdata_table">
    <thead>
        <tr>
            <th></th>
            <th>
                @Html.DisplayNameFor(model => model.NumInspection)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.UserDBs.FullName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.DO)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Company)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Control)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Section)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Address)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.City)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Scope)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Date)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.InspectionState.Description)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.LongitudeIni)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.LatitudeIni)
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    <input type="checkbox" name="id" value="@item.IdInspection" />
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.NumInspection)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.UserDBs.FullName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DO)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Company)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Control)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Section)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Address)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.City)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Scope)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Date)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.InspectionState.Description)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.LongitudeIni)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.LatitudeIni)
                </td>
            </tr>
        }
    </tbody>
</table>
@Html.DropDownList("type", null, "[Select a User]", htmlAttributes: new { @onchange = "filterMarkers(this);" })
<div id="map_canvas"></div>

<!-- Modal -->
<div id="modalUser" data-backdrop="false" class="modal fade" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">

                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Assign User</h4>
            </div>
            <div class="modal-body">
                <input type="hidden" name="bookId" id="bookId" value="" />
                <input type="hidden" name="userId" id="userId" value="" />


                <div class="form-group">
                    <label for="sel1">User</label>
                    @Html.DropDownList("Userdb", null, "[Select a User]", htmlAttributes: new { @class = "form-control", @onchange = "getval(this);" })
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success" id="save">Save</button>
                <button id="closemodal" type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>

<!-- Modal -->
<div id="modalDelete" data-backdrop="false" class="modal fade" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Assign User</h4>
            </div>
            <div class="modal-body">
                <input type="hidden" name="inspId" id="inspId" value="" />
                <input type="hidden" name="userId" id="userId" value="" />


                <div class="form-group">
                    <label for="sel1">User</label>
                    @Html.DropDownList("Userdb", null, "[Select a User]", htmlAttributes: new { @class = "form-control", @onchange = "getval(this);" })
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" name="btnDelete" id="btnDelete">Delete</button>
                <button id="closemodal" type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>

@Html.Raw(TempData["msg"])
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript" src="https://cdn.datatables.net/v/bs4/jq-3.2.1/dt-1.10.16/datatables.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
    <script type="text/javascript">
        var message = '';
        var table = "";
        var sel = [];
        var list;
        $(document).ready(function (e) {
            inicializar(e);
        }
    );
        function tabla() {
            table = $("#rawdata_table").DataTable({
                scrollY: '50vh',
                scrollCollapse: true,
                "createdRow": function (row, data, dataIndex) {
                    if (data[11] == "Almost time expires") {
                        $(row).addClass('lila');
                    } else if (data[11] == "In Mobile") {
                        $(row).addClass('green');
                    } else if (data[11] == "Assigned") {
                        $(row).addClass('grey');
                    }

                }

            });
        }
        function modal(e) {
            //$('#modalUser').on('show.bs.modal', function (e) {
            //    var id = $(e.relatedTarget).data().id;
            //    $(e.currentTarget).find('#bookId').val(id);
            //});
        }

        function lock() {
            $(".linkdisabled").click(function () {
                return false;
            });

        }

        function inicializar(e) {
            tabla();
            modal(e);
            lock();


        }
        @Html.Raw(ViewBag.Select);
    </script>
    <script>
        var Url = '@Url.Action("Save", "InspectionDailies")';
        var Urld = '@Url.Action("Delete", "InspectionDailies")';
        var user = 0;
        function getval(sel) {
            user = sel.value;
        }

        $("#save").on("click", function () {

            var idinsp = $('#bookId').val();
            if (user == 0) {
                swal('¡Alert!', 'Select User!.', 'error');
                return;
            }


            $.post(Url, { "listaIds": list, "user": user })
            .done(function (data) {
                swal('Info', 'Success', 'success');
                $("#modalUser").trigger('click');
                location.reload();
            })
            .fail(function (xhr, status, error) {
                swal('Error', xhr.responseText, 'error');
            });

        });

        $("#btnDelete").on("click", function () {

            var idinsp = $('#inspId').val();
            if (user == 0) {
                swal('¡Alert!', 'Select User!.', 'error');
                return;
            }


            $.post(Urld, { "listaIds": list, "user": user })
            .done(function (data) {
                swal('Info', 'Success', 'success');
                $("#modalDelete").trigger('click');
                location.reload();
            })
            .fail(function (xhr, status, error) {
                swal('Error', xhr.responseText, 'error');
            });

        });

        function getSelected() {
            $('input[type=checkbox]:checked').each(function (i) {
                sel[i] = $(this).val();
            })
            list = sel.join();
            if (list == "") {
                swal('¡Alert!', 'Select Inspection !.', 'error');
                location.reload();
                return false;
            }
            $("#bookId").val(sel);
        }

        function getSelectedDel() {
            $('input[type=checkbox]:checked').each(function (j) {
                sel[j] = $(this).val();
            })
            list = sel.join();
            swal('¡Alert!', 'Select Inspection !.', 'error');
            location.reload();
            return false;
            $("#inspId").val(sel);
        }

    </script>
    <script>
        var gmarkers1 = [];
        var User;
        markers1 = @Html.Raw(ViewBag.Markers);
        var map;
        var centerll = {lat: 30.161615, lng: -98.255301};
        function initMap() {
            map = new google.maps.Map(document.getElementById('map_canvas'), {
                center: centerll,
                zoom: 8
            });
            var infowindow = new google.maps.InfoWindow({
                content: ''
            });
            for (i = 0; i < markers1.length; i++) {
                addMarker(markers1[i]);
            }
            function addMarker(marker) {
                var image;
                var category = marker.User;
                var status = marker.User;
                var title = marker.User;
                var pos = new google.maps.LatLng(marker.latitude, - marker.longitude);
                var content = marker.Text;
                var pinImage ="http://www.googlemapsmarkers.com/v1/eefbf6/";
                var pinImagelila ="http://www.googlemapsmarkers.com/v1/f7eeee/";
                var pinImageyellow ="http://www.googlemapsmarkers.com/v1/fcfde1/";
                var standar = "http://www.googlemapsmarkers.com/v1/ff0000/";
                switch(content) {
                    case "Almost time expires":
                        image=pinImagelila;
                        break;

                    case "In Mobile":
                        image=pinImageyellow;
                        break;
                    case "Assigned":
                        image=pinImage;
                        break;
                    default:
                        image=standar;
                        break;
                }
                marker1 = new google.maps.Marker({
                    title: title,
                    position: pos,
                    icon: image,
                    category: category,
                    map: map
                });

                gmarkers1.push(marker1);

                // Marker click listener
                google.maps.event.addListener(marker1, 'click', (function (marker1, content) {
                    return function () {
                        console.log('Gmarker 1 gets pushed');
                        infowindow.setContent(content);
                        infowindow.open(map, marker1);
                        map.panTo(this.getPosition());
                        map.setZoom(15);
                    }
                })(marker1, content));
            }

            /**
             * Function to filter markers by category
             */

            filterMarkers = function (category) {
                category = $("#type option:selected").text();
                if(category=="[Select a User]")
                {
                    visibleall();
                    return;
                }
                for (i = 0; i < markers1.length; i++) {
                    marker = gmarkers1[i];
                    // If is same category or category not picked
                    if (marker.category == category || category.length === 0) {
                        marker.setVisible(true);
                    }
                        // Categories don't match
                    else {
                        marker.setVisible(false);
                    }
                }
            }
            function visibleall(){

                for (i = 0; i < markers1.length; i++) {
                    marker = gmarkers1[i];
                    marker.setVisible(true);
                }
            }
        }
    </script>
    <script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDwT17mYT6U4lLdhLb7sFQjq2smSkUQuEQ&callback=initMap">
    </script>
}